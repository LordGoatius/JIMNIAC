#![allow(dead_code)]

use septivigntimal::*;
use ternary::{trits::Trit, tryte::Tryte};

const fn isize(val: [[Trit; 3]; 3]) -> isize {
    unsafe { std::mem::transmute::<[[Trit; 3]; 3], Tryte>(val).isize() }
}

#[allow(non_camel_case_types)]
#[derive(Debug, PartialEq, Eq, PartialOrd, Ord)]
#[non_exhaustive]
#[repr(isize)]
pub enum TERSCII {
    NULL = isize([Z, Z, Z]),
    LE = isize([Z, Z, Y]),
    ESC = isize([Z, Z, X]),
    LR = isize([Z, Z, W]),
    OP = isize([Z, Z, V]),
    SU = isize([Z, Z, U]),
    SD = isize([Z, Z, T]),
    SP = isize([Z, Z, S]),
    ACK = isize([Z, Z, R]),
    NACK = isize([Z, Z, Q]),
    RT = isize([Z, Z, P]),
    TAB = isize([Z, Z, O]),
    Period = isize([Z, Z, N]),
    Zero = isize([Z, Z, ZERO]),
    One = isize([Z, Z, A]),
    Two = isize([Z, Z, B]),
    Three = isize([Z, Z, C]),
    Four = isize([Z, Z, D]),
    Five = isize([Z, Z, E]),
    Six = isize([Z, Z, F]),
    Seven = isize([Z, Z, G]),
    Eight = isize([Z, Z, H]),
    Nine = isize([Z, Z, I]),
    Exclamation = isize([Z, Z, J]),
    Question = isize([Z, Z, K]),
    Minus = isize([Z, Z, L]),
    Plus = isize([Z, Z, M]),
    A = isize([Z, Y, Z]),
    B = isize([Z, Y, Y]),
    C = isize([Z, Y, X]),
    D = isize([Z, Y, W]),
    E = isize([Z, Y, V]),
    F = isize([Z, Y, U]),
    G = isize([Z, Y, T]),
    H = isize([Z, Y, S]),
    I = isize([Z, Y, R]),
    J = isize([Z, Y, Q]),
    K = isize([Z, Y, P]),
    L = isize([Z, Y, O]),
    M = isize([Z, Y, N]),
    N = isize([Z, Y, ZERO]),
    O = isize([Z, Y, A]),
    P = isize([Z, Y, B]),
    Q = isize([Z, Y, C]),
    R = isize([Z, Y, D]),
    S = isize([Z, Y, E]),
    T = isize([Z, Y, F]),
    U = isize([Z, Y, G]),
    V = isize([Z, Y, H]),
    W = isize([Z, Y, I]),
    X = isize([Z, Y, J]),
    Y = isize([Z, Y, K]),
    Z = isize([Z, Y, L]),
    ADD_27_PREV = isize([Z, Y, M]),
    a = isize([Z, X, Z]),
    b = isize([Z, X, Y]),
    c = isize([Z, X, X]),
    d = isize([Z, X, W]),
    e = isize([Z, X, V]),
    f = isize([Z, X, U]),
    g = isize([Z, X, T]),
    h = isize([Z, X, S]),
    i = isize([Z, X, R]),
    j = isize([Z, X, Q]),
    k = isize([Z, X, P]),
    l = isize([Z, X, O]),
    m = isize([Z, X, N]),
    n = isize([Z, X, ZERO]),
    o = isize([Z, X, A]),
    p = isize([Z, X, B]),
    q = isize([Z, X, C]),
    r = isize([Z, X, D]),
    s = isize([Z, X, E]),
    t = isize([Z, X, F]),
    u = isize([Z, X, G]),
    v = isize([Z, X, H]),
    w = isize([Z, X, I]),
    x = isize([Z, X, J]),
    y = isize([Z, X, K]),
    z = isize([Z, X, L]),
    SUB_27_PREV = isize([Z, X, M]),

    ACCENTS_00 = isize([Z, W, Z]),
    ACCENTS_01 = isize([Z, W, Y]),
    ACCENTS_02 = isize([Z, W, X]),
    ACCENTS_03 = isize([Z, W, W]),
    ACCENTS_04 = isize([Z, W, V]),
    ACCENTS_05 = isize([Z, W, U]),
    ACCENTS_06 = isize([Z, W, T]),
    ACCENTS_07 = isize([Z, W, S]),
    ACCENTS_08 = isize([Z, W, R]),
    ACCENTS_09 = isize([Z, W, Q]),
    ACCENTS_10 = isize([Z, W, P]),
    LPAREN = isize([Z, W, O]),
    RPAREN = isize([Z, W, N]),
    LBRACE = isize([Z, W, ZERO]),
    RBRACE = isize([Z, W, A]),
    LBRACK = isize([Z, W, B]),
    RBRACK = isize([Z, W, C]),
    VERT = isize([Z, W, D]),
    UNDERSCORE = isize([Z, W, E]),
    DQUOTE = isize([Z, W, F]),
    SQUOTE = isize([Z, W, G]),
    TICK = isize([Z, W, H]),
    LANGLE = isize([Z, W, I]),
    RANGLE = isize([Z, W, J]),
    EQUAL = isize([Z, W, K]),
    SEMICOLON = isize([Z, W, L]),
    ASTERISK = isize([Z, W, M]),
    SLASH = isize([Z, V, Z]),
    BSLASH = isize([Z, V, Y]),
    COLON = isize([Z, V, X]),
    AT = isize([Z, V, W]),
    HASH = isize([Z, V, V]),
    DOLLAR = isize([Z, V, U]),
    PERCENT = isize([Z, V, T]),
    CARET = isize([Z, V, S]),
    AMP = isize([Z, V, R]),
    TILDE = isize([Z, V, Q]),
    COMMA = isize([Z, V, P]),
    CORNER_NW = isize([Z, V, O]),
    CORNER_NE = isize([Z, V, N]),
    CORNER_SE = isize([Z, V, ZERO]),
    CORNER_SW = isize([Z, V, A]),
    HORIZ_LINE = isize([Z, V, B]),
    T_DOWNSIDE = isize([Z, V, C]),
    T_UPSIDE = isize([Z, V, D]),
    T_EAST = isize([Z, V, E]),
    T_WEST = isize([Z, V, F]),
    VERT_LINE = isize([Z, V, G]),
    CROSS_LINE = isize([Z, V, H]),
    ROUNDED_NW = isize([Z, V, I]),
    ROUNDED_NE = isize([Z, V, J]),
    ROUNDED_SE = isize([Z, V, K]),
    ROUNDED_SW = isize([Z, V, L]),
    NULLSET = isize([Z, V, M]),
}

impl From<isize> for TERSCII {
    fn from(value: isize) -> Self {
        match value {
            _ if value == const { isize([Z, Z, Z]) } => TERSCII::NULL,
            _ if value == const { isize([Z, Z, Y]) } => TERSCII::LE,
            _ if value == const { isize([Z, Z, X]) } => TERSCII::ESC,
            _ if value == const { isize([Z, Z, W]) } => TERSCII::LR,
            _ if value == const { isize([Z, Z, V]) } => TERSCII::OP,
            _ if value == const { isize([Z, Z, U]) } => TERSCII::SU,
            _ if value == const { isize([Z, Z, T]) } => TERSCII::SD,
            _ if value == const { isize([Z, Z, S]) } => TERSCII::SP,
            _ if value == const { isize([Z, Z, R]) } => TERSCII::ACK,
            _ if value == const { isize([Z, Z, Q]) } => TERSCII::NACK,
            _ if value == const { isize([Z, Z, P]) } => TERSCII::RT,
            _ if value == const { isize([Z, Z, O]) } => TERSCII::TAB,
            _ if value == const { isize([Z, Z, N]) } => TERSCII::Period,
            _ if value == const { isize([Z, Z, ZERO]) } => TERSCII::Zero,
            _ if value == const { isize([Z, Z, A]) } => TERSCII::One,
            _ if value == const { isize([Z, Z, B]) } => TERSCII::Two,
            _ if value == const { isize([Z, Z, C]) } => TERSCII::Three,
            _ if value == const { isize([Z, Z, D]) } => TERSCII::Four,
            _ if value == const { isize([Z, Z, E]) } => TERSCII::Five,
            _ if value == const { isize([Z, Z, F]) } => TERSCII::Six,
            _ if value == const { isize([Z, Z, G]) } => TERSCII::Seven,
            _ if value == const { isize([Z, Z, H]) } => TERSCII::Eight,
            _ if value == const { isize([Z, Z, I]) } => TERSCII::Nine,
            _ if value == const { isize([Z, Z, J]) } => TERSCII::Exclamation,
            _ if value == const { isize([Z, Z, K]) } => TERSCII::Question,
            _ if value == const { isize([Z, Z, L]) } => TERSCII::Minus,
            _ if value == const { isize([Z, Z, M]) } => TERSCII::Plus,
            _ if value == const { isize([Z, Y, Z]) } => TERSCII::A,
            _ if value == const { isize([Z, Y, Y]) } => TERSCII::B,
            _ if value == const { isize([Z, Y, X]) } => TERSCII::C,
            _ if value == const { isize([Z, Y, W]) } => TERSCII::D,
            _ if value == const { isize([Z, Y, V]) } => TERSCII::E,
            _ if value == const { isize([Z, Y, U]) } => TERSCII::F,
            _ if value == const { isize([Z, Y, T]) } => TERSCII::G,
            _ if value == const { isize([Z, Y, S]) } => TERSCII::H,
            _ if value == const { isize([Z, Y, R]) } => TERSCII::I,
            _ if value == const { isize([Z, Y, Q]) } => TERSCII::J,
            _ if value == const { isize([Z, Y, P]) } => TERSCII::K,
            _ if value == const { isize([Z, Y, O]) } => TERSCII::L,
            _ if value == const { isize([Z, Y, N]) } => TERSCII::M,
            _ if value == const { isize([Z, Y, ZERO]) } => TERSCII::N,
            _ if value == const { isize([Z, Y, A]) } => TERSCII::O,
            _ if value == const { isize([Z, Y, B]) } => TERSCII::P,
            _ if value == const { isize([Z, Y, C]) } => TERSCII::Q,
            _ if value == const { isize([Z, Y, D]) } => TERSCII::R,
            _ if value == const { isize([Z, Y, E]) } => TERSCII::S,
            _ if value == const { isize([Z, Y, F]) } => TERSCII::T,
            _ if value == const { isize([Z, Y, G]) } => TERSCII::U,
            _ if value == const { isize([Z, Y, H]) } => TERSCII::V,
            _ if value == const { isize([Z, Y, I]) } => TERSCII::W,
            _ if value == const { isize([Z, Y, J]) } => TERSCII::X,
            _ if value == const { isize([Z, Y, K]) } => TERSCII::Y,
            _ if value == const { isize([Z, Y, L]) } => TERSCII::Z,
            _ if value == const { isize([Z, Y, M]) } => TERSCII::ADD_27_PREV,
            _ if value == const { isize([Z, X, Z]) } => TERSCII::a,
            _ if value == const { isize([Z, X, Y]) } => TERSCII::b,
            _ if value == const { isize([Z, X, X]) } => TERSCII::c,
            _ if value == const { isize([Z, X, W]) } => TERSCII::d,
            _ if value == const { isize([Z, X, V]) } => TERSCII::e,
            _ if value == const { isize([Z, X, U]) } => TERSCII::f,
            _ if value == const { isize([Z, X, T]) } => TERSCII::g,
            _ if value == const { isize([Z, X, S]) } => TERSCII::h,
            _ if value == const { isize([Z, X, R]) } => TERSCII::i,
            _ if value == const { isize([Z, X, Q]) } => TERSCII::j,
            _ if value == const { isize([Z, X, P]) } => TERSCII::k,
            _ if value == const { isize([Z, X, O]) } => TERSCII::l,
            _ if value == const { isize([Z, X, N]) } => TERSCII::m,
            _ if value == const { isize([Z, X, ZERO]) } => TERSCII::n,
            _ if value == const { isize([Z, X, A]) } => TERSCII::o,
            _ if value == const { isize([Z, X, B]) } => TERSCII::p,
            _ if value == const { isize([Z, X, C]) } => TERSCII::q,
            _ if value == const { isize([Z, X, D]) } => TERSCII::r,
            _ if value == const { isize([Z, X, E]) } => TERSCII::s,
            _ if value == const { isize([Z, X, F]) } => TERSCII::t,
            _ if value == const { isize([Z, X, G]) } => TERSCII::u,
            _ if value == const { isize([Z, X, H]) } => TERSCII::v,
            _ if value == const { isize([Z, X, I]) } => TERSCII::w,
            _ if value == const { isize([Z, X, J]) } => TERSCII::x,
            _ if value == const { isize([Z, X, K]) } => TERSCII::y,
            _ if value == const { isize([Z, X, L]) } => TERSCII::z,
            _ if value == const { isize([Z, X, M]) } => TERSCII::SUB_27_PREV,

            _ if value == const { isize([Z, W, Z]) } => TERSCII::ACCENTS_00,
            _ if value == const { isize([Z, W, Y]) } => TERSCII::ACCENTS_01,
            _ if value == const { isize([Z, W, X]) } => TERSCII::ACCENTS_02,
            _ if value == const { isize([Z, W, W]) } => TERSCII::ACCENTS_03,
            _ if value == const { isize([Z, W, V]) } => TERSCII::ACCENTS_04,
            _ if value == const { isize([Z, W, U]) } => TERSCII::ACCENTS_05,
            _ if value == const { isize([Z, W, T]) } => TERSCII::ACCENTS_06,
            _ if value == const { isize([Z, W, S]) } => TERSCII::ACCENTS_07,
            _ if value == const { isize([Z, W, R]) } => TERSCII::ACCENTS_08,
            _ if value == const { isize([Z, W, Q]) } => TERSCII::ACCENTS_09,
            _ if value == const { isize([Z, W, P]) } => TERSCII::ACCENTS_10,
            _ if value == const { isize([Z, W, O]) } => TERSCII::LPAREN,
            _ if value == const { isize([Z, W, N]) } => TERSCII::RPAREN,
            _ if value == const { isize([Z, W, ZERO]) } => TERSCII::LBRACE,
            _ if value == const { isize([Z, W, A]) } => TERSCII::RBRACE,
            _ if value == const { isize([Z, W, B]) } => TERSCII::LBRACK,
            _ if value == const { isize([Z, W, C]) } => TERSCII::RBRACK,
            _ if value == const { isize([Z, W, D]) } => TERSCII::VERT,
            _ if value == const { isize([Z, W, E]) } => TERSCII::UNDERSCORE,
            _ if value == const { isize([Z, W, F]) } => TERSCII::DQUOTE,
            _ if value == const { isize([Z, W, G]) } => TERSCII::SQUOTE,
            _ if value == const { isize([Z, W, H]) } => TERSCII::TICK,
            _ if value == const { isize([Z, W, I]) } => TERSCII::LANGLE,
            _ if value == const { isize([Z, W, J]) } => TERSCII::RANGLE,
            _ if value == const { isize([Z, W, K]) } => TERSCII::EQUAL,
            _ if value == const { isize([Z, W, L]) } => TERSCII::SEMICOLON,
            _ if value == const { isize([Z, W, M]) } => TERSCII::ASTERISK,

            _ if value == const { isize([Z, V, Z]) } => TERSCII::SLASH,
            _ if value == const { isize([Z, V, Y]) } => TERSCII::BSLASH,
            _ if value == const { isize([Z, V, X]) } => TERSCII::COLON,
            _ if value == const { isize([Z, V, W]) } => TERSCII::AT,
            _ if value == const { isize([Z, V, V]) } => TERSCII::HASH,
            _ if value == const { isize([Z, V, U]) } => TERSCII::DOLLAR,
            _ if value == const { isize([Z, V, T]) } => TERSCII::PERCENT,
            _ if value == const { isize([Z, V, S]) } => TERSCII::CARET,
            _ if value == const { isize([Z, V, R]) } => TERSCII::AMP,
            _ if value == const { isize([Z, V, Q]) } => TERSCII::TILDE,
            _ if value == const { isize([Z, V, P]) } => TERSCII::COMMA,
            _ if value == const { isize([Z, V, O]) } => TERSCII::CORNER_NW,
            _ if value == const { isize([Z, V, N]) } => TERSCII::CORNER_NE,
            _ if value == const { isize([Z, V, ZERO]) } => TERSCII::CORNER_SE,
            _ if value == const { isize([Z, V, A]) } => TERSCII::CORNER_SW,
            _ if value == const { isize([Z, V, B]) } => TERSCII::HORIZ_LINE,
            _ if value == const { isize([Z, V, C]) } => TERSCII::T_DOWNSIDE,
            _ if value == const { isize([Z, V, D]) } => TERSCII::T_UPSIDE,
            _ if value == const { isize([Z, V, E]) } => TERSCII::T_EAST,
            _ if value == const { isize([Z, V, F]) } => TERSCII::T_WEST,
            _ if value == const { isize([Z, V, G]) } => TERSCII::VERT_LINE,
            _ if value == const { isize([Z, V, H]) } => TERSCII::CROSS_LINE,
            _ if value == const { isize([Z, V, I]) } => TERSCII::ROUNDED_NW,
            _ if value == const { isize([Z, V, J]) } => TERSCII::ROUNDED_NE,
            _ if value == const { isize([Z, V, K]) } => TERSCII::ROUNDED_SE,
            _ if value == const { isize([Z, V, L]) } => TERSCII::ROUNDED_SW,
            _ if value == const { isize([Z, V, M]) } => TERSCII::NULLSET,
            _ => todo!(),
        }
    }
}

impl From<TERSCII> for char {
    fn from(value: TERSCII) -> Self {
        match value {
            TERSCII::NULL => '\0',
            TERSCII::LE => '\n',
            TERSCII::ESC => '\x1b',
            TERSCII::LR => todo!(),
            // NOTE: FIXME TEMP
            TERSCII::OP => '\x08',
            TERSCII::SU => todo!(),
            TERSCII::SD => todo!(),
            TERSCII::SP => ' ',
            TERSCII::ACK => '\x06',
            TERSCII::NACK => todo!(),
            TERSCII::RT => todo!(),
            TERSCII::TAB => '\t',
            TERSCII::Period => '.',
            TERSCII::Zero => '0',
            TERSCII::One => '1',
            TERSCII::Two => '2',
            TERSCII::Three => '3',
            TERSCII::Four => '4',
            TERSCII::Five => '5',
            TERSCII::Six => '6',
            TERSCII::Seven => '7',
            TERSCII::Eight => '8',
            TERSCII::Nine => '9',
            TERSCII::Exclamation => '!',
            TERSCII::Question => '?',
            TERSCII::Minus => '-',
            TERSCII::Plus => '+',
            TERSCII::A => 'A',
            TERSCII::B => 'B',
            TERSCII::C => 'C',
            TERSCII::D => 'D',
            TERSCII::E => 'E',
            TERSCII::F => 'F',
            TERSCII::G => 'G',
            TERSCII::H => 'H',
            TERSCII::I => 'I',
            TERSCII::J => 'J',
            TERSCII::K => 'K',
            TERSCII::L => 'L',
            TERSCII::M => 'M',
            TERSCII::N => 'N',
            TERSCII::O => 'O',
            TERSCII::P => 'P',
            TERSCII::Q => 'Q',
            TERSCII::R => 'R',
            TERSCII::S => 'S',
            TERSCII::T => 'T',
            TERSCII::U => 'U',
            TERSCII::V => 'V',
            TERSCII::W => 'W',
            TERSCII::X => 'X',
            TERSCII::Y => 'Y',
            TERSCII::Z => 'Z',
            TERSCII::ADD_27_PREV => todo!(),
            TERSCII::a => 'a',
            TERSCII::b => 'b',
            TERSCII::c => 'c',
            TERSCII::d => 'd',
            TERSCII::e => 'e',
            TERSCII::f => 'f',
            TERSCII::g => 'g',
            TERSCII::h => 'h',
            TERSCII::i => 'i',
            TERSCII::j => 'j',
            TERSCII::k => 'k',
            TERSCII::l => 'l',
            TERSCII::m => 'm',
            TERSCII::n => 'n',
            TERSCII::o => 'o',
            TERSCII::p => 'p',
            TERSCII::q => 'q',
            TERSCII::r => 'r',
            TERSCII::s => 's',
            TERSCII::t => 't',
            TERSCII::u => 'u',
            TERSCII::v => 'v',
            TERSCII::w => 'w',
            TERSCII::x => 'x',
            TERSCII::y => 'y',
            TERSCII::z => 'z',
            TERSCII::SUB_27_PREV => todo!(),

            TERSCII::ACCENTS_00 => todo!(),
            TERSCII::ACCENTS_01 => todo!(),
            TERSCII::ACCENTS_02 => todo!(),
            TERSCII::ACCENTS_03 => todo!(),
            TERSCII::ACCENTS_04 => todo!(),
            TERSCII::ACCENTS_05 => todo!(),
            TERSCII::ACCENTS_06 => todo!(),
            TERSCII::ACCENTS_07 => todo!(),
            TERSCII::ACCENTS_08 => todo!(),
            TERSCII::ACCENTS_09 => todo!(),
            TERSCII::ACCENTS_10 => todo!(),
            TERSCII::LPAREN => '(',
            TERSCII::RPAREN => ')',
            TERSCII::LBRACE => '{',
            TERSCII::RBRACE => '}',
            TERSCII::LBRACK => '[',
            TERSCII::RBRACK => ']',
            TERSCII::VERT => '|',
            TERSCII::UNDERSCORE => '_',
            TERSCII::DQUOTE => '"',
            TERSCII::SQUOTE => '\'',
            TERSCII::TICK => '`',
            TERSCII::LANGLE => '<',
            TERSCII::RANGLE => '>',
            TERSCII::EQUAL => '=',
            TERSCII::SEMICOLON => ';',
            TERSCII::ASTERISK => '*',

            TERSCII::SLASH => '/',
            TERSCII::BSLASH => '\\',
            TERSCII::COLON => ':',
            TERSCII::AT => '@',
            TERSCII::HASH => '#',
            TERSCII::DOLLAR => '$',
            TERSCII::PERCENT => '%',
            TERSCII::CARET => '^',
            TERSCII::AMP => '&',
            TERSCII::TILDE => '~',
            TERSCII::COMMA => ',',
            TERSCII::CORNER_NW => '┌',
            TERSCII::CORNER_NE => '┐',
            TERSCII::CORNER_SE => '┘',
            TERSCII::CORNER_SW => '└',
            TERSCII::HORIZ_LINE => '─',
            TERSCII::T_DOWNSIDE => '┴',
            TERSCII::T_UPSIDE => '┬',
            TERSCII::T_EAST => '├',
            TERSCII::T_WEST => '┤',
            TERSCII::VERT_LINE => '│',
            TERSCII::CROSS_LINE => '┼',
            TERSCII::ROUNDED_NW => '╭',
            TERSCII::ROUNDED_NE => '╮',
            TERSCII::ROUNDED_SE => '╯',
            TERSCII::ROUNDED_SW => '╰',
            TERSCII::NULLSET => '∅',
            #[allow(unreachable_patterns)]
            _ => todo!(),
        }
    }
}

impl From<char> for TERSCII {
    fn from(value: char) -> Self {
        match value {
            '\0' => TERSCII::NULL,
            '\n' => TERSCII::LE,
            '\x1b' => TERSCII::ESC,
            // todo!() => TERSCII::LR,
            '\x08' => TERSCII::OP,
            // todo!() => TERSCII::SU,
            // todo!() => TERSCII::SD,
            ' ' => TERSCII::SP,
            '\x06' => TERSCII::ACK,
            // todo!() => TERSCII::NACK,
            // todo!() => TERSCII::RT,
            '\t' => TERSCII::TAB,
            '.' => TERSCII::Period,
            '0' => TERSCII::Zero,
            '1' => TERSCII::One,
            '2' => TERSCII::Two,
            '3' => TERSCII::Three,
            '4' => TERSCII::Four,
            '5' => TERSCII::Five,
            '6' => TERSCII::Six,
            '7' => TERSCII::Seven,
            '8' => TERSCII::Eight,
            '9' => TERSCII::Nine,
            '!' => TERSCII::Exclamation,
            '?' => TERSCII::Question,
            '-' => TERSCII::Minus,
            '+' => TERSCII::Plus,
            'A' => TERSCII::A,
            'B' => TERSCII::B,
            'C' => TERSCII::C,
            'D' => TERSCII::D,
            'E' => TERSCII::E,
            'F' => TERSCII::F,
            'G' => TERSCII::G,
            'H' => TERSCII::H,
            'I' => TERSCII::I,
            'J' => TERSCII::J,
            'K' => TERSCII::K,
            'L' => TERSCII::L,
            'M' => TERSCII::M,
            'N' => TERSCII::N,
            'O' => TERSCII::O,
            'P' => TERSCII::P,
            'Q' => TERSCII::Q,
            'R' => TERSCII::R,
            'S' => TERSCII::S,
            'T' => TERSCII::T,
            'U' => TERSCII::U,
            'V' => TERSCII::V,
            'W' => TERSCII::W,
            'X' => TERSCII::X,
            'Y' => TERSCII::Y,
            'Z' => TERSCII::Z,
            // todo!() => TERSCII::ADD_27_PREV,
            'a' => TERSCII::a,
            'b' => TERSCII::b,
            'c' => TERSCII::c,
            'd' => TERSCII::d,
            'e' => TERSCII::e,
            'f' => TERSCII::f,
            'g' => TERSCII::g,
            'h' => TERSCII::h,
            'i' => TERSCII::i,
            'j' => TERSCII::j,
            'k' => TERSCII::k,
            'l' => TERSCII::l,
            'm' => TERSCII::m,
            'n' => TERSCII::n,
            'o' => TERSCII::o,
            'p' => TERSCII::p,
            'q' => TERSCII::q,
            'r' => TERSCII::r,
            's' => TERSCII::s,
            't' => TERSCII::t,
            'u' => TERSCII::u,
            'v' => TERSCII::v,
            'w' => TERSCII::w,
            'x' => TERSCII::x,
            'y' => TERSCII::y,
            'z' => TERSCII::z,
            // todo!() => TERSCII::SUB_27_PREV,
            // todo!() => TERSCII::ACCENTS_00,
            // todo!() => TERSCII::ACCENTS_01,
            // todo!() => TERSCII::ACCENTS_02,
            // todo!() => TERSCII::ACCENTS_03,
            // todo!() => TERSCII::ACCENTS_04,
            // todo!() => TERSCII::ACCENTS_05,
            // todo!() => TERSCII::ACCENTS_06,
            // todo!() => TERSCII::ACCENTS_07,
            // todo!() => TERSCII::ACCENTS_08,
            // todo!() => TERSCII::ACCENTS_09,
            // todo!() => TERSCII::ACCENTS_10,
            '(' => TERSCII::LPAREN,
            ')' => TERSCII::RPAREN,
            '{' => TERSCII::LBRACE,
            '}' => TERSCII::RBRACE,
            '[' => TERSCII::LBRACK,
            ']' => TERSCII::RBRACK,
            '|' => TERSCII::VERT,
            '_' => TERSCII::UNDERSCORE,
            '"' => TERSCII::DQUOTE,
            '\'' => TERSCII::SQUOTE,
            '`' => TERSCII::TICK,
            '<' => TERSCII::LANGLE,
            '>' => TERSCII::RANGLE,
            '=' => TERSCII::EQUAL,
            ';' => TERSCII::SEMICOLON,
            '*' => TERSCII::ASTERISK,

            '/' => TERSCII::SLASH,
            '\\' => TERSCII::BSLASH,
            ':' => TERSCII::COLON,
            '@' => TERSCII::AT,
            '#' => TERSCII::HASH,
            '$' => TERSCII::DOLLAR,
            '%' => TERSCII::PERCENT,
            '^' => TERSCII::CARET,
            '&' => TERSCII::AMP,
            '~' => TERSCII::TILDE,
            ',' => TERSCII::COMMA,
            '┌' => TERSCII::CORNER_NW,
            '┐' => TERSCII::CORNER_NE,
            '┘' => TERSCII::CORNER_SE,
            '└' => TERSCII::CORNER_SW,
            '─' => TERSCII::HORIZ_LINE,
            '┴' => TERSCII::T_DOWNSIDE,
            '┬' => TERSCII::T_UPSIDE,
            '├' => TERSCII::T_EAST,
            '┤' => TERSCII::T_WEST,
            '│' => TERSCII::VERT_LINE,
            '┼' => TERSCII::CROSS_LINE,
            '╭' => TERSCII::ROUNDED_NW,
            '╮' => TERSCII::ROUNDED_NE,
            '╯' => TERSCII::ROUNDED_SE,
            '╰' => TERSCII::ROUNDED_SW,
            '∅' => TERSCII::NULLSET,
            #[allow(unreachable_patterns)]
            _ => todo!(),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn terscii() {
        let null = TERSCII::NULL;
        println!("{null:?}");
    }
}
